'''
This file defines all the models that will be generated by Django's migrations.
It can be thought of similar to the database schema.
'''
from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.core.exceptions import ObjectDoesNotExist
from taggit.managers import TaggableManager


# The default `User` model contains only basic fields like `username` or `email`.
# In order to add more custom fields to a `User`, a `Profile` class is used; each
# `User` has a `Profile` which is automatically created.
class Profile(models.Model):
    # The User this Profile belongs to. If the User is deleted, the Profile is as well
    # (CASCADE)
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    # A field that can be used by employees to distinguish other employees, e.g. describing
    # their role in the organization
    description = models.CharField(
        max_length=5000,
        blank=True,
        default='',
        null=False
    )


# Model to represent categories
class Category(models.Model):
    # Name of the category
    category_name = models.CharField(max_length=50, blank=False, null=False, unique=True)

    def __str__(self):
        return self.category_name


# Model to represent resources
class AnswerResource(models.Model):
    # Short title to describe the resource (required)
    title = models.CharField(max_length=75, blank=False, null=False)
    # URL associated with the resource (required, must be unique)
    url = models.URLField(max_length=1000, unique=True, blank=False, null=False)
    # Blurb to describe the resource (required)
    blurb = models.CharField(max_length=2500, blank=True, default='')
    # Last updated
    updated = models.DateTimeField(auto_now=True)
    # Tagging
    tags = TaggableManager(help_text='Related keywords for this resource', blank=True)
    # Websraping content
    content = models.TextField(blank=True, default='')
    # Categories
    categories = models.ManyToManyField(Category)
    # Statistic fields
    appearances = models.IntegerField(blank=True, default=0)
    clicks = models.IntegerField(blank=True, default=0)
    thumbsDowns = models.IntegerField(blank=True, default=0)


# Callbacks for profiles
@receiver(post_save, sender=User)
def update_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)
    instance.profile.save()


@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    try:
        instance.profile.save()
    except ObjectDoesNotExist:
        Profile.objects.create(user=instance)


@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    '''
    Callback to save a `User`'s `Profile`.
    '''
    instance.profile.save()
